FROM torokati44/distcc-worker:latest


RUN apt-get update -y && apt-get install -y python3-minimal python3-pip \
      build-essential bison flex libxml2-dev zlib1g-dev python-minimal wget git


RUN pip3 install --upgrade pip && pip3 install rq

# These are necessary to make Click in rq happy.
# See: http://click.pocoo.org/5/python3/#python-3-surrogate-handling
ENV LC_ALL C.UTF-8
ENV LANG C.UTF-8

WORKDIR /opt/

RUN wget https://omnetpp.org/omnetpp/send/30-omnet-releases/2319-omnetpp-5-2-core \
      --referer=https://omnetpp.org/omnetpp -O omnetpp-5.2-src-core.tgz --progress=dot:giga
RUN tar xf omnetpp-5.2-src-core.tgz && rm omnetpp-5.2-src-core.tgz

# cloning inet here, so we can apply the patch needed for INET 4.0 (which is in the integration branch)
RUN git clone --recursive https://github.com/inet-framework/inet.git -b integration
WORKDIR /opt/inet
RUN git checkout integration

# needed for git so we can switch branches and stuff...
RUN git config --global user.email "anon@example.com"
RUN git config --global user.name "Anonymous"

# creating a new branch just to we don't mess up the integration reference
RUN git branch work && git checkout work

WORKDIR /opt/omnetpp-5.2

# applying the patch required for INET 4
RUN patch -p1 -i /opt/inet/misc/patch/inet-4.0-omnetpp-5.1_or_5.2.patch

ENV PATH /opt/omnetpp-5.2/bin:$PATH


RUN echo "CFLAGS_RELEASE='-O3 -DNDEBUG=1'" >> configure.user

RUN ./configure WITH_TKENV=no WITH_QTENV=no WITH_OSG=no WITH_OSGEARTH=no
RUN make MODE=release -j $(nproc)

WORKDIR /opt/inet

# (unused) disabling precompiled headers to make ccache work
# RUN sed -e '/precompiled header support/,+8d' -i src/makefrag

# (unused) ccache doesn't work if precompiled headers are not disabled...
RUN apt-get install ccache -y
ENV PATH /usr/lib/ccache:$PATH

ENV CCACHE_PREFIX distcc

# putting ccache on the host
ENV CCACHE_DIR /host-cache/inetccache

RUN make makefiles
# unused: doesn't make sense to build inet during image build if no ccache, and makes the image huge...
# && make MODE=release -j $(nproc)

WORKDIR /opt/

ENV PATH $PATH:/opt/inet/src/

RUN pip3 install pymongo flock

COPY fingerprints.py /opt/
COPY worker_fingerprints.py /opt/


ENTRYPOINT ["nice", "rq", "worker"]
